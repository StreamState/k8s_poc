workflow:
  namespace: ${namespace} # Specify namespace if workflows run in another namespace than argo. This controls where the service account and RBAC resources will be created.
  serviceAccount:
    create: false # Specifies whether a service account should be created
    annotations: {}
    name: ${serviceaccount} # Service account which is used to run workflows
  rbac:
    create: false # adds Role and RoleBinding for the above specified service account to be able to run workflows

createAggregateRoles: false
singleNamespace: true
controller:
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "9090"
  metricsConfig:
    enabled: true
  containerRuntimeExecutor: k8sapi #required for GKE autopilot
  clusterWorkflowTemplates:
    # Create a ClusterRole and CRB for the controller to access ClusterWorkflowTemplates.
    enabled: false
  serviceMonitor: # prometheus operator
    enabled: true 
    additionalLabels:
      app: argo
      release: prometheus

server:
  enabled: true
  # only updates base url of resources on client side,
  # it's expected that a proxy server rewrites the request URL and gets rid of this prefix
  # https://github.com/argoproj/argo-workflows/issues/716#issuecomment-433213190
  baseHref: /ui/ # see gateway/ingress.yml https://github.com/argoproj/argo-workflows/blob/master/docs/argo-server.md#ingress
  clusterWorkflowTemplates:
    # Create a ClusterRole and CRB for the server to access ClusterWorkflowTemplates.
    enabled: false
  
useDefaultArtifactRepo: true
artifactRepository:
  # archiveLogs will archive the main container logs as an artifact
  archiveLogs: true
  gcs:
    # todo, probably make this get passed in entirely.  see ./terraform/organization/serviceaccounts/serviceaccounts.tf
    bucket: streamstate-argologs-${organization} 
    keyFormat: "{{workflow.namespace}}/{{workflow.name}}/"
