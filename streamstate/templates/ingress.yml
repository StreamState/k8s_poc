apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: streamstateingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start?rd=$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      auth_request_set $name_upstream_1 $upstream_cookie__oauth2_proxy_1;
      access_by_lua_block {
        if ngx.var.name_upstream_1 ~= "" then
          ngx.header["Set-Cookie"] = "_oauth2_proxy_1=" .. ngx.var.name_upstream_1 .. ngx.var.auth_cookie:match("(; .*)")
        end
      }
    cert-manager.io/issuer: {{ or .Values.issuer "letsencrypt-staging" }}
    acme.cert-manager.io/http01-edit-in-place: "true"
  labels:
    app: streamstateingress
spec:
  ingressClassName: nginx
  tls: # < placing a host in the TLS config will indicate a certificate should be created
  - hosts:
    - {{ .Values.organization }}.streamstate.org
    secretName: streamstate-internal-cert # < cert-manager will store the created certificate in this secret
  rules:
    - host: {{ .Values.organization }}.streamstate.org
      http:
        paths:
        - path: /ui(/|$)(.*)
          pathType: Prefix
          backend:
            service:
              name: streamstate-argo-workflows-server
              port: 
                number: 2746
        - path: /grafana(/|$)(.*)
          pathType: Prefix
          backend:
            service:
              name: streamstate-grafana
              port:
                number: 3000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: streamstatesparkhistory
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start?rd=$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth
    nginx.ingress.kubernetes.io/proxy-redirect-from: http://$host/history/
    nginx.ingress.kubernetes.io/proxy-redirect-to: /sparkhistory/history/
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header Accept-Encoding "";
      sub_filter_last_modified off;
      sub_filter '<head>' '<head> <base href="/sparkhistory/">'; # add base url
      sub_filter 'href="/' 'href="'; # remove absolute URL path so base url applies
      sub_filter 'src="/' 'src="'; # remove absolute URL path so base url applies
      sub_filter '/{{ "{{num}}" }}/jobs/' '/jobs/';
      sub_filter "setUIRoot('')" "setUIRoot('/sparkhistory')"; # Set UI root for JS scripts
      sub_filter "document.baseURI.split" "document.documentURI.split"; # Executors page issue fix
      sub_filter_once off;
      sub_filter_types text/html text/css text/javascript application/javascript; # Specify filter types to prevent processing all files

      auth_request_set $name_upstream_1 $upstream_cookie__oauth2_proxy_1;
      access_by_lua_block {
        if ngx.var.name_upstream_1 ~= "" then
          ngx.header["Set-Cookie"] = "_oauth2_proxy_1=" .. ngx.var.name_upstream_1 .. ngx.var.auth_cookie:match("(; .*)")
        end
      }
    #cert-manager.io/issuer: "letsencrypt-staging" 
    acme.cert-manager.io/http01-edit-in-place: "true"
  labels:
    app: streamstatesparkhistory
spec:
  ingressClassName: nginx
  tls: # < placing a host in the TLS config will indicate a certificate should be created
  - hosts:
    - {{ .Values.organization }}.streamstate.org
    secretName: streamstate-internal-cert # < 
  rules:
    - host: {{ .Values.organization }}.streamstate.org
      http:
        paths:
        - path: /sparkhistory/?(.*)
          pathType: Prefix
          backend:
            service: 
              name: streamstate-spark-history-server
              port: 
                number: 18080 
          
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: streamstateapi
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start?rd=$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      auth_request_set $name_upstream_1 $upstream_cookie__oauth2_proxy_1;
      access_by_lua_block {
        if ngx.var.name_upstream_1 ~= "" then
          ngx.header["Set-Cookie"] = "_oauth2_proxy_1=" .. ngx.var.name_upstream_1 .. ngx.var.auth_cookie:match("(; .*)")
        end
      }
    #cert-manager.io/issuer: "letsencrypt-staging" # "letsencrypt-staging"
    acme.cert-manager.io/http01-edit-in-place: "true"
  labels:
    app: streamstateapi
spec:
  ingressClassName: nginx
  tls: 
  - hosts:
    - {{ .Values.organization }}.streamstate.org
    secretName: streamstate-internal-cert # < 
  rules:
    - host: {{ .Values.organization }}.streamstate.org
      http:
        paths:
        - path: /api/replay
          pathType: Prefix
          backend:
            service:
              name: argowebhookreplay
              port:
                number: 12000
        - path: /api/deploy
          pathType: Prefix
          backend:
            service:
              name: argowebhookdeploy
              port:
                number: 13000
        - path: /api
          pathType: Prefix
          backend:
            service:
              name: restapi
              port:
                number: 8000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: streamstateingressstatic
  annotations:
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start?rd=$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_cache static-cache;
      proxy_cache_valid 404 10m;
      proxy_cache_use_stale error timeout updating http_404 http_500 http_502 http_503 http_504;
      auth_request_set $name_upstream_1 $upstream_cookie__oauth2_proxy_1;
      proxy_cache_bypass $http_x_purge;
      add_header X-Cache-Status $upstream_cache_status;
      access_by_lua_block {
        if ngx.var.name_upstream_1 ~= "" then
          ngx.header["Set-Cookie"] = "_oauth2_proxy_1=" .. ngx.var.name_upstream_1 .. ngx.var.auth_cookie:match("(; .*)")
        end
      }
    acme.cert-manager.io/http01-edit-in-place: "true"
  labels:
    app: streamstateingressstatic
spec:
  ingressClassName: nginx
  tls: # < placing a host in the TLS config will indicate a certificate should be created
  - hosts:
    - {{ .Values.organization }}.streamstate.org
    secretName: streamstate-internal-cert # < already generated
  rules:
    - host: {{ .Values.organization }}.streamstate.org
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service: 
              name: mainui
              port:
                number: 80
        - path: /docs
          pathType: Prefix
          backend:
            service: 
              name: restapi
              port: 
                number: 8000

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oauth2-proxy
  annotations:
    acme.cert-manager.io/http01-edit-in-place: "true"
    # no need to annotate with cert-manager.io/issuer: "letsencrypt-prod"
    # since the secret is already generated.  Just re-use the secret
  labels:
    app: oauth2-proxy
spec:
  ingressClassName: nginx
  tls: # < placing a host in the TLS config will indicate a certificate should be created
  - hosts:
    - {{ .Values.organization }}.streamstate.org
    secretName: streamstate-internal-cert # < already generated
  rules:
    - host: {{ .Values.organization }}.streamstate.org
      http:
        paths:
        - path: /oauth2
          pathType: Prefix
          backend:
            service: 
              name: oauth2-reverse-proxy
              port:
                number: 4180        